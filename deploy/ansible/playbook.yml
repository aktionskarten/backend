---
- name: Install aktionskarten-backend
  hosts: backend
  become: true

  vars:
    GIT_FRONTEND_URL: https://github.com/aktionskarten/frontend.git
    GIT_BACKEND_URL: https://github.com/aktionskarten/backend.git
    HOME_DIR: /var/www
    FRONTEND_DIR: "{{HOME_DIR}}/frontend"
    BACKEND_DIR: "{{HOME_DIR}}/backend"
    VENV_DIR: "{{BACKEND_DIR}}/env"
    SERVER_NAME: staging.aktionskarten.org
    letsencrypt_fqdn: ["{{SERVER_NAME}}"]
    APP_PYTHON_RUN: ". env/bin/activate && python"
    APP_FLASK_RUN: ". env/bin/activate && flask"

  roles:
    - ansible-role-nginx-letsencrypt

  gather_facts: False
  pre_tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3-minimal)
      register: output
      changed_when: output.stdout != ""
    - name: Gathering Facts
      setup:

  tasks:
    - name: Generate locale en_US.UTF8
      locale_gen: name=en_US.UTF-8 state=present

    - name: Set locale to en_US.UTF8
      command: '{{ item }}'
      with_items:
        - update-locale LANG=en_US.UTF-8
        - dpkg-reconfigure locales -f noninteractive

    - name: Install packages
      apt:
        name: "{{ packages }}"
      vars:
        packages:
        - libmapnik3.0
        - libmapnik-dev
        - redis-server
        - python3-venv
        - python3-dev
        - libcairo2
        - libcairo2-dev
        - libboost-all-dev
        - nginx
        - git
        - wget
        - bzip2
        - postgresql
        - postgresql-10-postgis-2.4
        - postgresql-10-postgis-2.4-scripts
        - postgresql-contrib
        - postgis
        - imagemagick
        - osm2pgsql
        - npm
        - sudo
        - build-essential

          # debian
          #- postgresql-9.6-postgis-2.3
          #- postgresql-9.6-postgis-2.3-scripts

    #
    # Postgresql + postgis
    #
    - name: "Set auth for postgres to trust for unix domain sockets"
      lineinfile:
        path: /etc/postgresql/10/main/pg_hba.conf
        regexp: 'local\s+all\s+postgres\s+peer'
        line: 'local all postgres trust'

    - name: Start postgresql as a service
      service: name=postgresql state=restarted enabled=true
      tags:
        postgres

    #
    # Frontend
    #
    - name: Create frontend source directory
      file:
        path: '{{FRONTEND_DIR}}'
        state: directory
        owner: www-data
        group: www-data
      tags:
        - frontend

    - name: Checkout aktionskarten frontend source
      git: repo={{GIT_FRONTEND_URL}} dest={{FRONTEND_DIR}}
      become: yes
      become_user: www-data
      tags:
        - frontend

    - name: Create npm directory in home
      file:
        path: "{{HOME_DIR}}/.npm"
        state: directory
        owner: www-data
        group: www-data
      tags:
        - frontend

    - name: Install frontend dependencies
      npm:
        path: "{{FRONTEND_DIR}}"
      become: yes
      become_user: www-data
      tags:
        - frontend

    - name: Create config for frontend
      template:
        src: templates/frontend.j2
        dest: "{{FRONTEND_DIR}}/.env"
        owner: www-data
        group: www-data
      tags:
        - frontend

    - name: Build frontend
      shell: "npm run build"
      args:
        chdir: "{{FRONTEND_DIR}}"
      environment:
        API_ENDPOINT: "https://{{SERVER_NAME}}"
      become: yes
      become_user: www-data
      tags:
        - frontend

    #
    # Backend
    #
    - name: Create source directory
      file:
        path: '{{BACKEND_DIR}}'
        state: directory
        owner: www-data
        group: www-data
      tags:
        - backend

    - name: Checkout aktionskarten-backend source
      git: repo={{GIT_BACKEND_URL}} dest={{BACKEND_DIR}}
      become: yes
      become_user: www-data
      tags:
        - backend

    - name: Install python packages
      pip:
        requirements: '{{BACKEND_DIR}}/requirements.txt'
        virtualenv: '{{VENV_DIR}}'
        virtualenv_command: /usr/bin/python3 -m venv env
      become: yes
      become_user: www-data
      tags:
        - deps

    - name: Install npx
      npm:
        name: npx
        path: "{{BACKEND_DIR}}"
      become: yes
      become_user: www-data
      tags:
        - deps

    - name: Install python-mapnik
      shell: "{{APP_PYTHON_RUN}} app/cli/pymapnik.py install"
      args:
        chdir: "{{BACKEND_DIR}}"
      become: yes
      become_user: www-data
      tags:
        - configure

    - name: Init DB
      shell: "{{APP_FLASK_RUN}} postgres init"
      args:
        chdir: "{{BACKEND_DIR}}"
      become: yes
      become_user: www-data
      tags:
        - configure

    - name: Download and import openstreetmap  data
      shell: "{{APP_FLASK_RUN}} osm init"
      args:
        chdir: "{{BACKEND_DIR}}"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{BACKEND_DIR}}/node_modules/.bin"
      become: yes
      become_user: www-data
      tags:
        - configure

    - name: Generate markers
      shell: "{{APP_FLASK_RUN}} gen-markers"
      args:
        chdir: "{{BACKEND_DIR}}"
      become: yes
      become_user: www-data
      tags:
        - configure

    #
    # UWSGI - we use gunicorn because of socket.io
    #
    #- name: "Copying uwsgi config"
    #  template:
    #    src: templates/uwsgi.j2
    #    dest: /etc/uwsgi/apps-available/backend.ini
    #    owner: www-data
    #    group: www-data
    #  tags:
    #    uwsgi

    #- name: "Enabling uwsgi app"
    #  file:
    #    src: /etc/uwsgi/apps-available/backend.ini
    #    dest: /etc/uwsgi/apps-enabled/backend.ini
    #    state: link
    #  tags:
    #    uwsgi

    #- name: Start and enable uwsgi as service
    #  service: name=uwsgi state=started enabled=yes
    #  tags:
    #    uwsgi

    #
    # Gunicorn
    #
    - name: Ensure gunicorn systemd unit is present
      template:
        src: templates/gunicorn.j2
        dest: /etc/systemd/system/gunicorn.service
        owner: www-data
        group: www-data
      tags:
        gunicorn

    - name: Gunicorn is enabled and started on boot
      service: name=gunicorn state=started enabled=yes
      tags:
        gunicorn

    #
    # Redis queue worker
    #
    - name: Redis is enabled and started on boot
      service: name=redis state=started enabled=yes
      tags:
        rqworker

    - name: Ensure redis queue worker systemd unit is present
      template:
        src: templates/rqworker.j2
        dest: /etc/systemd/system/rqworker.service
        owner: www-data
        group: www-data
      tags:
        rqworker

    - name: Redis queue worker  is enabled and started on boot
      service: name=rqworker state=started enabled=yes
      tags:
        rqworker

    #
    # NGINX
    #
    - name: Remove default nginx page
      file: dest=/etc/nginx/sites-enabled/default state=absent
      tags:
        nginx

    - name: "Copying nginx config"
      template:
        src: templates/nginx.j2
        dest: /etc/nginx/sites-available/backend.cfg
        owner: www-data
        group: www-data
      tags:
        nginx

    #- name: "Generating safe diffie hellman params"
    #  shell: openssl dhparam -out dhparam.pem 4096
    #  args:
    #    chdir: "/etc/ssl/"
    #    creates: dhparam.pem

    - name: "Enabling nginx site"
      file:
        src: /etc/nginx/sites-available/backend.cfg
        dest: /etc/nginx/sites-enabled/backend.cfg
        state: link
      tags:
        nginx

    - name: Start and enable nginx as service
      service: name=nginx state=started enabled=yes
      tags:
        nginx
