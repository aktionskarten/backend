---
- name: Install aktionskarten-backend
  hosts: backend
  become: true

  vars:
    OSM_USER: gis
    PSQL_USER: gis
    PSQL_PASS: gis
    PSQL_DB_OSM: gis
    PSQL_DB_MAP: maps
    GEOFABRIK_URL: http://download.geofabrik.de/europe/germany/berlin-latest.osm.bz2
    GIT_REPO_URL: https://github.com/aktionskarten/backend.git
    DEST_DIR: /var/www/backend
    SERVER_NAME: staging.aktionskarten.org
    letsencrypt_fqdn: ["{{SERVER_NAME}}"]

  roles:
    - ansible-role-nginx-letsencrypt

  gather_facts: False
  pre_tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3-minimal)
      register: output
      changed_when: output.stdout != ""
    - name: Gathering Facts
      setup:

  tasks:
    - name: Generate locale en_US.UTF8
      locale_gen: name=en_US.UTF-8 state=present

    - name: Set locale to en_US.UTF8
      command: '{{ item }}'
      with_items:
        - update-locale LANG=en_US.UTF-8
        - dpkg-reconfigure locales -f noninteractive

    - name: Install packages
      apt: name={{item}} state=present
      with_items:
        - python3-wheel
        - python3-cairocffi
        - python3-mapnik
        - python3-venv
        - python3-shapely
        - python3-numpy
        - python3-virtualenv
        - python3-psycopg2
        - python3-dev
        - python3-gunicorn
        - python3-eventlet
        - gunicorn3
        - nginx
        - libffi-dev
        - git
        - wget
        - bzip2
        - osm2pgsql
        - postgresql-9.6
        - postgresql-9.6-postgis-2.3-scripts
        - imagemagick
        - openstreetmap-carto
        - sudo
        - build-essential

    - name: Start postgresql as a service
      service: name=postgresql state=started enabled=true
      tags:
        postgres

    - name: Create postgres user
      postgresql_user: name={{PSQL_USER}} password={{PSQL_PASS}}
      become: true
      become_user: postgres
      tags:
        postgres

    - name: Create postgres databases
      postgresql_db: name={{item}} owner={{PSQL_USER}} encoding=utf-8
      with_items: ['{{PSQL_DB_OSM}}', '{{PSQL_DB_MAP}}']
      become: true
      become_user: postgres
      tags:
        postgres

    - name: Enable postgis extension for dbs
      postgresql_ext: name=postgis db={{item}}
      with_items: ['{{PSQL_DB_OSM}}', '{{PSQL_DB_MAP}}']
      become: true
      become_user: postgres
      tags:
        postgres

    - name: Enable hstore extension for db
      postgresql_ext: name=hstore db={{PSQL_DB_OSM}}
      become: true
      become_user: postgres
      tags:
        postgres

    - name: Create osm user
      user: name={{OSM_USER}}
      tags:
        osm

    - name: Download osm data
      get_url: url={{GEOFABRIK_URL}} dest='~/latest.osm.bz2'
      become: true
      become_user: '{{OSM_USER}}'
      tags:
        osm

    - name: Import osm data into postgresql
      command: osm2pgsql -U gis -d {{PSQL_DB_OSM}} ~/latest.osm.bz2
      become: true
      become_user: '{{OSM_USER}}'
      environment:
        - PGPASSWORD: '{{ PSQL_PASS }}'
      tags:
        osm

    - name: Creates directory
      file:
        path: '{{DEST_DIR}}'
        state: directory
        owner: www-data
        group: www-data
      tags:
        - backend

    - name: Checkout aktionskarten-backend source
      git: repo={{GIT_REPO_URL}} dest={{DEST_DIR}}
      become: yes
      become_user: www-data
      tags:
        - backend

    - name: Install python packages
      pip:
        requirements: '{{DEST_DIR}}/requirements.txt'
        virtualenv: '{{DEST_DIR}}/env'
        virtualenv_command: /usr/bin/python3 -m venv --system-site-packages
      become: yes
      become_user: www-data
      tags:
        - backend

    #
    # UWSGI
    #
    #- name: "Copying uwsgi config"
    #  template:
    #    src: templates/uwsgi.j2
    #    dest: /etc/uwsgi/apps-available/backend.ini
    #    owner: www-data
    #    group: www-data
    #  tags:
    #    uwsgi

    #- name: "Enabling uwsgi app"
    #  file:
    #    src: /etc/uwsgi/apps-available/backend.ini
    #    dest: /etc/uwsgi/apps-enabled/backend.ini
    #    state: link
    #  tags:
    #    uwsgi

    #- name: Start and enable uwsgi as service
    #  service: name=uwsgi state=started enabled=yes
    #  tags:
    #    uwsgi

    #
    # Gunicorn
    #
    - name: Ensure gunicorn systemd unit is present
      template:
        src: templates/gunicorn.j2
        dest: /etc/systemd/system/gunicorn.service
        owner: www-data
        group: www-data
      tags:
        gunicorn

    - name: Gunicorn is enabled and started on boot
      service: name=gunicorn state=started enabled=yes
      tags:
        gunicorn

    #
    # NGINX
    #
    - name: Remove default nginx page
      file: dest=/etc/nginx/sites-enabled/default state=absent
      tags:
        nginx

    - name: "Copying nginx config"
      template:
        src: templates/nginx.j2
        dest: /etc/nginx/sites-available/backend.cfg
        owner: www-data
        group: www-data
      tags:
        nginx

    - name: "Generating safe diffie hellman params"
      shell: openssl dhparam -out dhparam.pem 4096
        args:
          chdir: /etc/ssl/
          creates: dhparam.pem

    - name: "Enabling nginx site"
      file:
        src: /etc/nginx/sites-available/backend.cfg
        dest: /etc/nginx/sites-enabled/backend.cfg
        state: link
      tags:
        nginx

    - name: Start and enable nginx as service
      service: name=nginx state=started enabled=yes
      tags:
        nginx
